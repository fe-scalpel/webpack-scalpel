<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>Webpack  Scalpel</title>
    <script src="https://a.alipayobjects.com/g/datavis/g6/1.0.3/index.js"></script>
    <script src="https://cdn.bootcss.com/jquery/2.2.1/jquery.js"></script>
    <style>
      html,body{
        height:100%;
        margin:0px;
        padding:0px;
      }
      .btns{
        position: fixed;
        left: 10px;
        top: 10px;
        z-index:100;
      }
     
      #c2{
        display: none;
        background: -webkit-linear-gradient(top, transparent 9px, #f9f9f9 10px), -webkit-linear-gradient(left, transparent 9px, #f9f9f9 10px);
        background-size: 10px 10px;
        height:100%;
        padding:50px;
      }
      li{
        list-style: none;
        padding:10px 0px;
      }
    </style>
  </head>
  <body>
    <div class="btns">
      <button id="b1">dependencies</button>
      <button id="b2">not use</button>
    </div>

    <div id="c1" ></div>
    <div id="c2" >
      <ul>
        <% for(var i=0; i<unused.length; i++) {%>
          <li><%= unused[i] %></li>
        <% } %>
      </ul>
    </div>
    
    <script>
      $('#b1').click(function(){
        $('#c1').show();
        $('#c2').hide();
      })

      $('#b2').click(function(){
        $('#c1').hide();
        $('#c2').show();
      })

      var data = <%- chartData %>;

      var Layout = G6.Layout;
      var Util = G6.Util;
      var map = {};
      var maxValue = 0;
      var maxValueTmp;
      var layout;
      var sizeDomain = 20;
      G6.Global.nodeLabelStyle = {
        fill: '#666',
        textAlign: 'center',
        fontSize: 12,
        textBaseline: 'middle'
      };
      G6.registNode('customNode',{
        getAnchorPoints: function(){
          return 'auto'
        },
        afterDraw:function(cfg,group){
          var color = {
            file: '#f1c40f',
            module: '#3498db',
          }
          group.addShape('rect', {
            attrs: {
              x: cfg.x-cfg.size[0]/2,
              y: cfg.y-cfg.size[1]/2,
              width:cfg.size[0],
              height:cfg.size[1],
              fill: color[cfg.origin.type],
              opacity: 0.3,
              radius:4
            }
          });
        }
      });
      G6.registEdge('bezierQuadratic',{
        afterDraw: function(cfg, group, edge){
          var points = cfg.points;
          var start = points[0];
          var end = points[points.length - 1];
          var center = edge.getPoint(0.5);
          var lineWidth = edge.attr('lineWidth');
          if(lineWidth < 5){
            lineWidth = 5;
          }
          // 关于自身坐标系构造一个形，作为箭头
          var arrow = group.addShape('polyline', {
            attrs:{
              points: [
                [-lineWidth/4, lineWidth/2],
                [lineWidth/4, 0],
                [-lineWidth/4, -lineWidth/2]
              ],
              stroke: '#333'
            },
            class: 'arrow'
          });
          arrow.hide();
          Util.arrowTo(arrow, center.x, center.y, center.x, center.y, end.x, end.y);
        }
      });
      Util.each(data.nodes, function(node){
        map[node.id] = node;
      });
      Util.each(data.edges, function(edge){
        maxValueTmp = parseInt(edge.value);
        if(maxValueTmp > maxValue) maxValue = maxValueTmp;
      });
      layout = new Layout.Force({
        nodes: data.nodes,
        edges: data.edges,
        stiffness: 100.0,         // 硬度
        damping: 0.1,             // 阻尼
        minEnergyThreshold: 200,  // 能量域值
        repulsion: 2000.0         // 斥力
      });
      var net = new G6.Net({
        id: 'c1',           // 容器ID
        height: 800         // 画布高
      });
      net.source(data.nodes, data.edges);
      net.node()
        .label('id')
        .style({
        fill: 'white',
        fillOpacity: 0.8
      });
      net.edge()
        .size('value', function(val){
        return Math.pow(parseInt(val)/maxValue, 1/3) * sizeDomain;
      })
        .style({
        opacity: 0.2
      })
        .shape('bezierQuadratic');
      layout.onNodeChange = function(id, point){
        map[id].x = point.x*60+400;
        map[id].y = point.y*60+400;
      };
      layout.onFinish = function(){
        net.render();
      };
      net.on('mouseenter', function(ev){
        var item = ev.item;
        var group;
        var arrow;
        if(!item || ev.itemType === 'edge') return;
        var unRelativeItems = item.getUnRelativeItems();
        var edges = item.get('edges');
        Util.each(unRelativeItems, function(v){
          v.hide();
        });
        Util.each(edges, function(v){
          group = v.get('group');
          arrow = group.findByCFG('class', 'arrow')[0];
          arrow.show();
        });
        net.refresh();
      });
      net.on('mouseleave', function(ev){
        var item = ev.item;
        var group;
        var arrow;
        if(!item || ev.itemType === 'edge') return;
        var unRelativeItems = item.getUnRelativeItems();
        var edges = item.get('edges');
        Util.each(unRelativeItems, function(v){
          v.show();
        });
        Util.each(edges, function(v){
          group = v.get('group');
          arrow = group.findByCFG('class', 'arrow')[0];
          arrow.hide();
        });
        net.refresh();
      });       

    </script>
  </body>
</html>
